{"version":3,"sources":["components/EmployeeAttributes.js","components/Search.js","components/Navbar.js","routes/API.js","components/Button.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeAttributes","createContext","Search","useState","search","setSearch","useContext","employees","visibleEmployees","type","onChange","searchTerm","target","value","filteredEmployees","filter","employee","name","first","toLowerCase","indexOf","Navbar","className","useGet","url","allEmployees","criteriaEmployees","useEffect","a","axios","get","response","data","results","console","log","retrieveEmployees","sortEmployees","sort","b","dob","age","Button","children","Table","onClick","map","key","login","uuid","last","gender","email","App","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.40b5db14.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\nexport const EmployeeAttributes = createContext(null);","import React, { useState, useContext } from 'react';\r\nimport { EmployeeAttributes } from './EmployeeAttributes.js';\r\n\r\n\r\nfunction Search() {\r\n    // stores the characters entered into the search bar\r\n    const [search, setSearch] = useState(\"\")\r\n    const { employees, visibleEmployees } = useContext(EmployeeAttributes)\r\n\r\n    function updateSearch({ target }) {\r\n\r\n        const searchTerm = target.value\r\n\r\n        setSearch(searchTerm)\r\n        // filters the employees based on search bar\r\n\r\n        const filteredEmployees = employees.filter(function (employee) {\r\n            // Looks at every employee's first name, sets the name to lowercase, \r\n            // ... if first name contains searched characters, put it on the DOM\r\n            // ... if not, remove it\r\n            return employee.name.first.toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1 ? true : false\r\n        })\r\n        visibleEmployees([...filteredEmployees])\r\n    }\r\n\r\n    return (\r\n        <input type=\"text\" onChange={updateSearch} value={search}></input>\r\n    )\r\n}\r\nexport default Search;","import React from 'react';\r\nimport Search from \"./Search.js\"\r\nimport \"./Navbar.css\"\r\n\r\nfunction Navbar() {\r\n\r\n    return (\r\n        <div className=\"navbar\">\r\n            <div className=\"logo bold\">Employee Directory</div>\r\n            <div className=\"descriptor\">\r\n                <div className=\"bold\">Search for an Employee: </div>\r\n                <Search />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Navbar;","import { useEffect, useContext } from 'react';\r\nimport { EmployeeAttributes } from \"../components/EmployeeAttributes\"\r\nimport axios from \"axios\"\r\n\r\nexport function useGet(url) {\r\n    const { employees, allEmployees, criteriaEmployees, visibleEmployees } = useContext(EmployeeAttributes)\r\n\r\n\r\n    useEffect(() => {\r\n        async function retrieveEmployees() {\r\n            try {\r\n                const response = await axios.get(url)\r\n                // using employees to store a copy of employees that won't be edited\r\n                allEmployees(response.data.results)\r\n                // retrieve a sample of all employees who can be used for sorting and filtering\r\n                visibleEmployees(response.data.results)\r\n            }\r\n            catch (error) {\r\n                console.log(\"error ocurred getting info from the API: \", error)\r\n            }\r\n        }\r\n        retrieveEmployees()\r\n    }, [])\r\n\r\n    // sort options\r\n    function sortEmployees(sort) {\r\n        switch (sort) {\r\n            case \"name\":\r\n                FirstNameSort()\r\n                break\r\n            case \"age\":\r\n                AgeSort()\r\n                break\r\n            default:\r\n                console.log(\"sort does not match any cases\")\r\n        }\r\n    }\r\n\r\n    // will sort based on an employee's first name\r\n    function FirstNameSort() {\r\n        employees.sort(function (a, b) {\r\n            if (a.name.first < b.name.first) {\r\n                return -1;\r\n            } else {\r\n                return 1;\r\n            }\r\n        })\r\n\r\n        visibleEmployees([...employees])\r\n    }\r\n\r\n    // sorts the employees by age.\r\n    function AgeSort() {\r\n        employees.sort(function (a, b) {\r\n            return (a.dob.age - b.dob.age)\r\n        })\r\n        visibleEmployees([...employees])\r\n    }\r\n\r\n    return { criteriaEmployees, sortEmployees }\r\n}","import React from 'react';\r\nimport \"./Button.css\"\r\n\r\nfunction Button({ children }) {\r\n\r\n    return (\r\n        <button className=\"Button\">\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\nexport default Button;","import React, { useState, useContext } from 'react';\r\nimport { useGet } from \"../routes/API.js\"\r\nimport \"./Table.css\"\r\nimport Button from \"./Button.js\"\r\nimport { EmployeeAttributes } from './EmployeeAttributes.js';\r\n\r\nfunction Table() {\r\n    // https://randomuser.me/documentation#howto\r\n    //open source user info api\r\n\r\n    const [url] = useState(\"https://randomuser.me/api/?results=20\")\r\n\r\n    const { sortEmployees } = useGet(url);\r\n    // contains the employees that meet a certain criteria\r\n    const { criteriaEmployees } = useContext(EmployeeAttributes)\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <td onClick={() => sortEmployees(\"name\")}><Button>First Name</Button></td>\r\n                    <td>Last Name</td>\r\n                    <td>User ID</td>\r\n                    <td>Gender</td>\r\n                    <td>E-mail</td>\r\n                    <td onClick={() => sortEmployees(\"age\")}><Button>Age</Button></td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {criteriaEmployees.map(employee => {\r\n                    return (\r\n                        <tr key={employee.login.uuid}>\r\n                            <td>{employee.name.first}</td>\r\n                            <td>{employee.name.last}</td>\r\n                            <td>{employee.login.uuid}</td>\r\n                            <td>{employee.gender}</td>\r\n                            <td>{employee.email}</td>\r\n                            <td>{employee.dob.age}</td>\r\n                        </tr>\r\n                    )\r\n                }\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\nexport default Table;","\nimport React, { useState } from 'react';\n\nimport './App.css';\nimport Navbar from \"./components/Navbar\"\nimport Table from \"./components/Table\"\nimport { EmployeeAttributes } from \"./components/EmployeeAttributes\"\n\nfunction App() {\n  const [employees, allEmployees] = useState([]);\n  const [criteriaEmployees, visibleEmployees] = useState([])\n\n  return (\n    <div className=\"App\">\n      <EmployeeAttributes.Provider value={{ employees, allEmployees, criteriaEmployees, visibleEmployees }}>\n        <Navbar />\n        <Table />\n      </EmployeeAttributes.Provider>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}